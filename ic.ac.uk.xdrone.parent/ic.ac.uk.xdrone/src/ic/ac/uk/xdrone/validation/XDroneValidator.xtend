/*
 * generated by Xtext 2.12.0
 */
package ic.ac.uk.xdrone.validation

import org.eclipse.xtext.validation.Check
import ic.ac.uk.xdrone.xDrone.FunctionName
import ic.ac.uk.xdrone.xDrone.XDronePackage
import java.util.ArrayList
import org.eclipse.xtext.resource.IResourceServiceProvider
import javax.inject.Inject
import org.eclipse.xtext.naming.IQualifiedNameConverter

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class XDroneValidator extends AbstractXDroneValidator {
	
	var existingFunctions = new ArrayList<String>;
		
	@Inject IResourceServiceProvider.Registry rspr
	@Inject IQualifiedNameConverter converter
	
	@Check
	def void printExportedObjects(FunctionName resource) {
		existingFunctions.clear();
	    val resServiceProvider = rspr.getResourceServiceProvider(resource.eResource.URI)
	    val manager = resServiceProvider.getResourceDescriptionManager()
	    val description = manager.getResourceDescription(resource.eResource)
	    for (eod : description.exportedObjects) {
	        existingFunctions.add(converter.toString(eod.qualifiedName));
    	}
 		
 		if(!existingFunctions.contains(resource.func_name))
 		{
 			error('No matching function!', XDronePackage.Literals.FUNCTION_NAME__FUNC_NAME)
 		}
 		
 	}
 			
}
